package tests

import (
	"context"
	"testing"
	"time"

	"github.com/kenmobility/git-api-service/internal/domains/models"
	"github.com/kenmobility/git-api-service/internal/dtos"
	"github.com/kenmobility/git-api-service/internal/usecases"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type MockCommitRepository struct {
	mock.Mock
}

func (m *MockCommitRepository) SaveCommit(ctx context.Context, commit domains.Commit) (*domains.Commit, error) {
	args := m.Called(ctx, commit)
	return args.Get(0).(*domains.Commit), args.Error(1)
}

func (m *MockCommitRepository) AllCommitsByRepository(ctx context.Context, repoMetadata domains.RepoMetadata, query dtos.APIPagingDto) (*dtos.AllCommitsResponse, error) {
	args := m.Called(ctx, repoMetadata, query)
	return args.Get(0).(*dtos.AllCommitsResponse), args.Error(1)
}

func (m *MockCommitRepository) TopCommitAuthorsByRepository(ctx context.Context, repo domains.RepoMetadata, limit int) ([]string, error) {
	args := m.Called(ctx, repo, limit)
	return args.Get(0).([]string), args.Error(1)
}

type MockGitManagerClient struct {
	mock.Mock
}

func (m *MockGitManagerClient) FetchRepoMetadata(ctx context.Context, repositoryName string) (*domains.RepoMetadata, error) {
	args := m.Called(ctx, repositoryName)
	return args.Get(0).(*domains.RepoMetadata), args.Error(1)
}

func (m *MockGitManagerClient) FetchCommits(ctx context.Context, repo domains.RepoMetadata, since time.Time, until time.Time, lastFetchedCommit string) ([]domains.Commit, error) {
	args := m.Called(ctx, repo, since, until, lastFetchedCommit)
	return args.Get(0).([]domains.Commit), args.Error(1)
}

type MockRepoMetadataRepository struct {
	mock.Mock
}

func (m *MockRepoMetadataRepository) SaveRepoMetadata(ctx context.Context, repository domains.RepoMetadata) (*domains.RepoMetadata, error) {
	args := m.Called(ctx, repository)
	return args.Get(0).(*domains.RepoMetadata), args.Error(1)
}

func (m *MockRepoMetadataRepository) UpdateRepoMetadata(ctx context.Context, repo domains.RepoMetadata) (*domains.RepoMetadata, error) {
	args := m.Called(ctx, repo)
	return args.Get(0).(*domains.RepoMetadata), args.Error(1)
}

func (m *MockRepoMetadataRepository) RepoMetadataByPublicId(ctx context.Context, publicId string) (*domains.RepoMetadata, error) {
	args := m.Called(ctx, publicId)
	return args.Get(0).(*domains.RepoMetadata), args.Error(1)
}

func (m *MockRepoMetadataRepository) RepoMetadataByName(ctx context.Context, name string) (*domains.RepoMetadata, error) {
	args := m.Called(ctx, name)
	return args.Get(0).(*domains.RepoMetadata), args.Error(1)
}

func (m *MockRepoMetadataRepository) AllRepoMetadata(ctx context.Context) ([]domains.RepoMetadata, error) {
	args := m.Called(ctx)
	return args.Get(0).([]domains.RepoMetadata), args.Error(1)
}

func TestFetchCommitsUseCase(t *testing.T) {
	mockCommitRepo := new(MockCommitRepository)
	mockGitClient := new(MockGitManagerClient)

	mockRepoMetadataRepository := new(MockRepoMetadataRepository)

	mockCommits := []domains.Commit{
		{CommitID: "abc123", Message: "Initial commit", Author: "john.doe", Date: time.Now(), URL: "http://example.com/commit/abc123"},
	}

	mockGitClient.On("FetchCommits", "repoName", mock.Anything, mock.Anything).Return(mockCommits, nil)
	mockCommitRepo.On("SaveCommits", mockCommits).Return(nil)

	useCase := usecases.NewManageGitCommitUsecase(mockCommitRepo, mockRepoMetadataRepository)

	err := useCase.GetAllCommitsByRepository(context.Background(), "repoName", dtos.APIPagingDto{})
	assert.NoError(t, err)

	mockGitClient.AssertExpectations(t)
	mockCommitRepo.AssertExpectations(t)
}
