// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kenmobility/git-api-service/test (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination mock/store.go github.com/kenmobility/git-api-service/test Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	domains "github.com/kenmobility/git-api-service/internal/domains"
	dtos "github.com/kenmobility/git-api-service/internal/http/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AllCommitsByRepository mocks base method.
func (m *MockStore) AllCommitsByRepository(arg0 context.Context, arg1 domains.RepoMetadata, arg2 dtos.APIPagingDto) (*dtos.AllCommitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCommitsByRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dtos.AllCommitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCommitsByRepository indicates an expected call of AllCommitsByRepository.
func (mr *MockStoreMockRecorder) AllCommitsByRepository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCommitsByRepository", reflect.TypeOf((*MockStore)(nil).AllCommitsByRepository), arg0, arg1, arg2)
}

// AllRepoMetadata mocks base method.
func (m *MockStore) AllRepoMetadata(arg0 context.Context) ([]domains.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRepoMetadata", arg0)
	ret0, _ := ret[0].([]domains.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRepoMetadata indicates an expected call of AllRepoMetadata.
func (mr *MockStoreMockRecorder) AllRepoMetadata(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRepoMetadata", reflect.TypeOf((*MockStore)(nil).AllRepoMetadata), arg0)
}

// RepoMetadataByName mocks base method.
func (m *MockStore) RepoMetadataByName(arg0 context.Context, arg1 string) (*domains.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoMetadataByName", arg0, arg1)
	ret0, _ := ret[0].(*domains.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoMetadataByName indicates an expected call of RepoMetadataByName.
func (mr *MockStoreMockRecorder) RepoMetadataByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoMetadataByName", reflect.TypeOf((*MockStore)(nil).RepoMetadataByName), arg0, arg1)
}

// RepoMetadataByPublicId mocks base method.
func (m *MockStore) RepoMetadataByPublicId(arg0 context.Context, arg1 string) (*domains.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoMetadataByPublicId", arg0, arg1)
	ret0, _ := ret[0].(*domains.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoMetadataByPublicId indicates an expected call of RepoMetadataByPublicId.
func (mr *MockStoreMockRecorder) RepoMetadataByPublicId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoMetadataByPublicId", reflect.TypeOf((*MockStore)(nil).RepoMetadataByPublicId), arg0, arg1)
}

// SaveCommit mocks base method.
func (m *MockStore) SaveCommit(arg0 context.Context, arg1 domains.Commit) (*domains.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommit", arg0, arg1)
	ret0, _ := ret[0].(*domains.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCommit indicates an expected call of SaveCommit.
func (mr *MockStoreMockRecorder) SaveCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommit", reflect.TypeOf((*MockStore)(nil).SaveCommit), arg0, arg1)
}

// SaveRepoMetadata mocks base method.
func (m *MockStore) SaveRepoMetadata(arg0 context.Context, arg1 domains.RepoMetadata) (*domains.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepoMetadata", arg0, arg1)
	ret0, _ := ret[0].(*domains.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRepoMetadata indicates an expected call of SaveRepoMetadata.
func (mr *MockStoreMockRecorder) SaveRepoMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepoMetadata", reflect.TypeOf((*MockStore)(nil).SaveRepoMetadata), arg0, arg1)
}

// TopCommitAuthorsByRepository mocks base method.
func (m *MockStore) TopCommitAuthorsByRepository(arg0 context.Context, arg1 domains.RepoMetadata, arg2 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopCommitAuthorsByRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopCommitAuthorsByRepository indicates an expected call of TopCommitAuthorsByRepository.
func (mr *MockStoreMockRecorder) TopCommitAuthorsByRepository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopCommitAuthorsByRepository", reflect.TypeOf((*MockStore)(nil).TopCommitAuthorsByRepository), arg0, arg1, arg2)
}

// UpdateRepoMetadata mocks base method.
func (m *MockStore) UpdateRepoMetadata(arg0 context.Context, arg1 domains.RepoMetadata) (*domains.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoMetadata", arg0, arg1)
	ret0, _ := ret[0].(*domains.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepoMetadata indicates an expected call of UpdateRepoMetadata.
func (mr *MockStoreMockRecorder) UpdateRepoMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoMetadata", reflect.TypeOf((*MockStore)(nil).UpdateRepoMetadata), arg0, arg1)
}
